/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package minesweeper;

import java.awt.*;
import java.awt.event.*;
import java.security.SecureRandom;
import java.time.LocalTime;
import javax.swing.*;
import javax.swing.plaf.metal.MetalButtonUI;

/**
 *This class is creates main window for minesweeper game and contains 
 * the main method as well
 * @version 1.0
 * @author saqib
 * @since 10/04/2019
 */
public class Minesweeper extends javax.swing.JFrame {
    
    /**
     * Constructor of Minesweeper instantiates all components 
     * by using iniComponents() method and sets initial difficulty
     * instantiates the times property as well to create timer.Also adds 
     * actionListener to it
     * @see #initComponents() 
     * 
     */
    public Minesweeper() {
        initComponents();
        jTextField2.setEditable(false);
        myScore=new SaveScore();
        this.setDifficulty(); 
        now=LocalTime.of(0, 0, 0);
        time=new Timer(1000, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                
                now=now.plusSeconds(1);
                jTextField1.setText(now.toString());
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        clock = new javax.swing.JButton();
        newGame = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        difficulty = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        scores = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Minesweeper");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(new ImageIcon("src/minesweeper/pngs/title.PNG").getImage());
        setLocationByPlatform(true);
        setMaximumSize(null);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));
        jPanel2.setMinimumSize(new java.awt.Dimension(500, 500));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBorder(null);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(0, 51, 102));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jTextArea1.setText("Welcome to minesweeper!\n'press NEW to start new game'\n");
        jScrollPane1.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 410, 520, 240));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minesweeper/pngs/start.PNG"))); // NOI18N
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 710));

        jPanel1.setBackground(new java.awt.Color(0, 73, 76));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));

        clock.setBackground(new java.awt.Color(0, 153, 102));
        clock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minesweeper/pngs/clock.png"))); // NOI18N
        clock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        newGame.setBackground(new java.awt.Color(255, 255, 0));
        newGame.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        newGame.setText("New ");
        newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameActionPerformed(evt);
            }
        });

        reset.setBackground(new java.awt.Color(255, 204, 0));
        reset.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        reset.setText("Reset");
        reset.setEnabled(false);
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        difficulty.setBackground(new java.awt.Color(255, 102, 0));
        difficulty.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        difficulty.setText("Difficulty");
        difficulty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                difficultyActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(255, 255, 204));
        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        scores.setBackground(new java.awt.Color(255, 102, 0));
        scores.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        scores.setText("Scores");
        scores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoresActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minesweeper/pngs/flagg.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jTextField2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText(this.size+"");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(clock, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addComponent(newGame, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(difficulty, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scores, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(clock)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addComponent(newGame, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(difficulty, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scores, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(101, 101, 101))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(729, 10, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameActionPerformed
        
        this.reset.setEnabled(true);
        diff.setSelected();
        setMode();
        this.cube = new Square[this.size][this.size];
        this.jPanel2.setLayout(new GridLayout(this.size, this.size, 6, 6));
        newOrReset();
        

    }//GEN-LAST:event_newGameActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        
        newOrReset();
        

    }//GEN-LAST:event_resetActionPerformed

    private void difficultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_difficultyActionPerformed

        diff.setLocationRelativeTo(this);
        diff.setVisible(true);
        this.setEnabled(false);
        diff.setMainWindow(this);

    }//GEN-LAST:event_difficultyActionPerformed

    private void scoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoresActionPerformed
        this.myScore.highscore().setLocationRelativeTo(this);
        this.myScore.setMainWindow(this);
        this.setEnabled(false);
        
    }//GEN-LAST:event_scoresActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Minesweeper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Minesweeper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Minesweeper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Minesweeper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Minesweeper().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clock;
    private javax.swing.JButton difficulty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton newGame;
    private javax.swing.JButton reset;
    private javax.swing.JButton scores;
    // End of variables declaration//GEN-END:variables
    private Difficulty diff;
    private Square[][] cube;
    private int size;
    private int noMines;
    private int open;
    private int flags;
    private Timer time;
    private LocalTime now;
    private SaveScore myScore;
    
    /**
     * This method setups the Squares needed for 
     * game and adds ActionListener to them, it adds 
     * them to a JPanel which is on main Window of game.
     */
    public void squareSetup() {
        for (int i = 0; i < this.size; i++) {
            for (int j = 0; j < this.size; j++) {

                Square s = new Square(i, j);
                this.cube[i][j] = s;
                s.addMouseListener(new MouseClass());
                jPanel2.add(s);
            }
        }
    }
    
    /**
     * This method sets font and image for JButtons 
     * which are used for game play.
     */
    public void squareFontIcon() {
        for (int i = 0; i < this.size; i++) {
            for (int j = 0; j < this.size; j++) {
                this.cube[i][j].setIcon("/minesweeper/pngs/button.PNG", true);
                this.cube[i][j].setFont(this.size);

            }
        }
    }

    /**
     * This method sets some Squares as Mined
     * depending on difficulty level
     * @see minesweeper.Square
     */
    public void layMines() {
        SecureRandom sc = new SecureRandom();
        int mines = this.noMines;
        int row, col;
        while (mines > 0) {
            row = sc.nextInt(this.size);
            col = sc.nextInt(this.size);
            if (!this.cube[row][col].mined()) {
                this.cube[row][col].setMined(true);
                mines--;
            }
        }
    }

    /**
     * This method opens the Squares and keeps on 
     * opening the surrounded Squares until found a 
     * square with at least one mined Square.It is a recursive
     * method which calls itself.All the Squares are present in an
     * Square array so it receives the row and column of Square.This method
     * uses {@link #validOption(int, int) } method to check if Square is valid 
     * and {@link #calculateMines(int, int) } to calculate number of mines Squares around
     * as parameter
     * @param x row of Square
     * @param y column of Square
     */
    public void openCell(int x, int y) {

        if (validOption(x, y)) {
            if (calculateMines(x, y) == 0) {
                
                this.revealedLook(x, y);
                for (int j = x - 1; j <= x + 1; j++) {
                    for (int k = y - 1; k <= y + 1; k++) {
                        openCell(j, k);

                    }
                }
            } else {
                this.revealedLook(x, y);
                this.cube[x][y].setText(calculateMines(x, y) + "");
            }
        }
    }

    /**
     * This method calculates the number of hidden mines 
     * the game is going to have depending on the difficulty
     * selected.
     */
    public void setMode() {

        if (diff.getSelected() == 0) {
            this.size = 10;
            this.noMines = (this.size * this.size * 10) / 100;
        } else if (diff.getSelected() == 1) {
            this.size = 15;
            this.noMines = (this.size * this.size * 15) / 100;
        } else if (diff.getSelected() == 2) {
            this.size = 18;
            this.noMines = (this.size * this.size * 18) / 100;
        } else if(diff.getSelected()==3){
            this.size=diff.getTam();
            this.noMines=diff.getMine();
        }

    }

    /**
     * This method calculates number of mined Squares 
     * around the Square which is present at the position 
     * passed by us as parameter it returns the number of mines
     * @param x row of Square.
     * @param y col of Square.
     * @return Number of mined Square surrounded by this Square.
     */
    public int calculateMines(int x, int y) {
        int mines = 0;
        for (int j = x - 1; j <= x + 1; j++) {
            for (int k = y - 1; k <= y + 1; k++) {
                if (j >= 0 && j < this.size && k >= 0 && k < this.size) {
                    if (this.cube[j][k].mined()) {
                        mines++;
                    }
                }

            }
        }
        return mines;

    }

    /**
     * This method evaluates if game is won or not
     * @return true if won false if lost.
     */
    public boolean won() {
        boolean won = false;
        int box = this.size * this.size;

        if ((box - this.open) == this.noMines) {
            won = true;
        }
        return won;

    }

    /**
     * This method gives appearance to Squares according
     * to win or lose.
     * @param won  
     * 
     */
    public void result(boolean won) {
        
        time.stop();
        
        for (int i = 0; i < this.size; i++) {
            for (int j = 0; j < this.size; j++) {
                this.cube[i][j].setEnabled(false);
                if(!won){
                    if(this.cube[i][j].mined()){
                        if(this.cube[i][j].state()==0 || this.cube[i][j].state()==2){
                            
                            this.cube[i][j].setIcon("/minesweeper/pngs/Mine3.PNG", false);
                        }else if(this.cube[i][j].state()==1){
                            this.cube[i][j].setIcon("/minesweeper/pngs/correct.PNG", false);
                        }
                    }else{
                        if(this.cube[i][j].state()==0){
                            this.cube[i][j].setIcon("/minesweeper/pngs/button.PNG", false);
                        }else if(this.cube[i][j].state()==1){
                            this.cube[i][j].setIcon("/minesweeper/pngs/uncorrect.PNG", false);
                        }else if(this.cube[i][j].state()==2){
                            this.cube[i][j].setIcon("/minesweeper/pngs/mark.PNG", false);
                        }
                    }
                }else{
                    
                    if(this.cube[i][j].mined()){
                        this.cube[i][j].setIcon("/minesweeper/pngs/correct.PNG", false);
                    }
                }
                

            }

        }

    }

    /**
     * This method checks if the Square selected to be opened
     * is valid and is inside limits of bounds.This method is also been
     * used by {@link #openCell(int, int) } method of this class.It returns
     * true or false.
     * @param x The row of Square we need to evaluate
     * @param y The column of Square we need to evaluate
     * @return true if valid,false if not
     * 
     */
    public boolean validOption(int x, int y) {
        boolean valid = false;
        if (x >= 0 && x < this.size && y >= 0 && y < this.size && !this.cube[x][y].mined()
                && (this.cube[x][y].state() == 0 || this.cube[x][y].state() == 1)) {
            valid = true;
        }
        return valid;
    }
    
    /**
     * This method returns a MetalButtonUI with color of
     * text set for a disabled button.The color given varies 
     * of each number between 1 and 8 which is possible number of
     * mined Squares surrounded.
     * @param num Number of mined Square surrounded.
     * @return MetalButtonUI to give appearance to our Square.
     * @see javax.swing.plaf.metal.MetalButtonUI
     */
    public MetalButtonUI numMines(int num) {
        MetalButtonUI res = new MetalButtonUI() {
            Color col = Color.BLACK;

            protected Color getDisabledTextColor() {
                if (num == 1) {
                    col = Color.BLUE;
                } else if (num == 2) {
                    col = Color.green.darker();
                } else if (num == 3) {
                    col = Color.RED;
                } else if (num == 4) {
                    col = Color.cyan.darker();
                } else if (num == 5) {
                    col = Color.magenta;
                } else if (num == 6) {
                    col = Color.PINK;
                } else if (num == 7) {
                    col = Color.orange;
                }

                return col;
            }
        };
        return res;
    }
    
    /*
    Inner class which allows to manage mouse click on Square.
    */
    private class MouseClass extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {

            Square sq = (Square) e.getSource();
            if (sq.isEnabled()) {
                if (e.getButton() == 1) {
                    if (sq.state() == 0) {
                        if (sq.mined()) {
                            result(false);
                        } else {
                            openCell(sq.getRow(), sq.getCol());
                        }
                    }
                } else if (e.getButton() == 3) {
                    if (sq.state() == 0 && flags > 0) {
                        sq.setState(1);
                        sq.setIcon("/minesweeper/pngs/flag.PNG", true);
                        flags--;
                        jTextField2.setText(flags+"");
                    } else if (sq.state() == 0 && flags == 0) {
                        sq.setState(2);
                        sq.setIcon("/minesweeper/pngs/mark.PNG", true);
                    } else if (sq.state() == 1) {
                        sq.setState(2);
                        sq.setIcon("/minesweeper/pngs/mark.PNG", true);
                        flags++;
                        jTextField2.setText(flags+"");
                    } else if (sq.state() == 2) {
                        sq.setState(0);
                        sq.setIcon("/minesweeper/pngs/button.PNG", true);
                    }
                }
            }
            if (won()) {
                
                result(true);
                Minesweeper.this.saveScore();
            }
        }
    }
    
    /**
     * This method creates difficulty and 
     * sets it
     * @see minesweeper.Difficulty
     */
    public void setDifficulty() {
        this.diff = new Difficulty();
        diff.setLocationRelativeTo(this);
        diff.setVisible(false);
        diff.setSelected();
    }
    
    /**
     * This method sets up a new game according to
     * the present conditions or resets it.Both 
     * thing happen according to the JButton clicked.
     * 
     */
    public void newOrReset() {

        this.open = 0;
        this.flags = this.noMines;
        this.jTextField2.setText(this.flags+"");
        this.jPanel2.removeAll();
        this.jPanel2.repaint();
        squareSetup();
        layMines();
        this.jPanel2.setVisible(true);
        this.setVisible(true);
        squareFontIcon();
        now=LocalTime.of(0, 0, 0);
        time.start();
    }
    
    /**
     * Sets up the appearance of a open 
     * Square which is present at position passed by parameters
     * @param x row of Square
     * @param y column of Square.
     */
    public void revealedLook(int x, int y) {
        
        this.cube[x][y].setIcon(null);
        if(this.cube[x][y].state()==1){
            flags++;
            this.jTextField2.setText(this.flags+"");
        }
        this.cube[x][y].setState(3);
        this.cube[x][y].setEnabled(false);
        this.cube[x][y].setUI(numMines(calculateMines(x, y)));
        this.open++;
    }
    
    /**
     * This method opens a new window
     * which is used to save score.
     */
    public void saveScore() {       
        myScore.setResult(this.size,this.noMines,this.now);
        myScore.setLocationRelativeTo(this);
        myScore.setVisible(true); 
        this.setEnabled(false);
        myScore.setMainWindow(this);
        
    }
}
